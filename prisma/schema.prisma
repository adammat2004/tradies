// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Plan {
  free
  premium
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  plan           Plan          @default(free)
  customerId     String? // stripe ID, will be needed for deleting subscriptions
  accounts       Account[]
  listings       Listing[]
  TempListing    TempListing[]
  posts          Posts[]
  jobs           job[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  imageSrc     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  category     String
  email        String
  operationCounties String[]
  phone_number String
  company_name String
  street       String
  town         String
  city         String
  county       String
  country      String
  userId       String    @db.ObjectId
  startDate    DateTime  @default(now())
  endDate      DateTime?
  plan         String    @default("free")
  isActive     Boolean   @default(false)
  posts        Posts[]

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TempListing {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId String?   @unique
  category        String
  imageSrc        String
  title           String
  description     String
  email           String
  operationCounties String[]
  phone_number    String
  company_name    String
  street          String
  town            String
  city            String
  county          String
  country         String
  plan            String
  isActive        Boolean
  userId          String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model job {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle       String //site manager
  category      String //plumber, electical
  companyName    String
  location       String
  salary         String?
  jobType       String //eg fulltime
  requirements   String[]
  description    String
  benefits       String[]
  contactInfo    String //who to contact if interested
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Posts {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  comment String?
  pictures String[]
  listingId String @db.ObjectId
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}