// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Plan {
  free
  premium
}

enum Mode {
  basic
  work
}
model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  Boolean @default(false)
  emailVerificationToken String?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  plan           Plan          @default(free)
  mode           Mode          @default(basic)
  customerId     String? // stripe ID, will be needed for deleting subscriptions
  accounts       Account[]
  listings       Listing[]
  TempListing    TempListing[]
  posts          Posts[]
  jobs           job[]
  quotes          Quote[]
  reviews       Reviews[]
  requests      Request[]
  resetPasswordToken String?
  resetPasswordExpires DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  is_business  Boolean @default(true)
  description  String
  imageSrc     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  category     String[]
  email        String
  operationCounties String[]
  phone_number String
  company_name String
  street       String
  town         String
  city         String
  county       String
  //stripeCustomerId String? @unique
  country      String
  userId       String    @db.ObjectId
  startDate    DateTime  @default(now())
  expiresOn    DateTime?
  plan         String    @default("free")
  isActive     Boolean   @default(false)
  jobCapacity Int      @default(1)
  posts        Posts[]
  reviews      Reviews[]
  jobs         job[]
  embeddingParts Json?
  embeddingInput String?
  skillsEmbedding Json?
  service     Service[]
  requests    Request[]
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PricingModel {
  hourly
  quote_only
}

model Service {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId        String   @db.ObjectId
  name             String
  description      String?
  durationMin      Int       @default(60)
  bufferBeforeMin  Int       @default(0)
  bufferAfterMin   Int       @default(0)
  minNoticeMin     Int       @default(120)
  maxNoticeDays    Int       @default(60)
  pricingModel     PricingModel @default(quote_only)
  hourlyRate       Float?    // used if pricingModel = hourly
  calloutFee       Float?    // optional
  priceFrom        Float?    // optional anchor

  requests         Request[]
  listing          Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  @@index([listingId])
}

model AvailabilityRule {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String   @db.ObjectId
  rrule      String   // e.g. FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR
  startTime  String   // "08:00"
  endTime    String   // "17:00"
  timezone   String   // e.g. "Europe/Dublin"

  @@index([listingId])
}

model AvailabilityException {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  startAt   DateTime
  endAt     DateTime
  type      String   // "block" | "open"
  reason    String?

  @@index([listingId, startAt, endAt])
}

enum BookingStatus {
  pending     // provider proposed or awaiting confirmation
  confirmed   // locked in
  completed   // job done
  cancelled   // cancelled by user/provider
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  listingId   String        @db.ObjectId
  serviceId   String?       @db.ObjectId
  customerId  String        @db.ObjectId
  startAt     DateTime
  endAt       DateTime
  status      BookingStatus @default(pending)
  priceFinal  Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([listingId, startAt, endAt])   // conflict checks
  @@index([customerId])                  // user history
  @@index([serviceId])                   // service reporting
}

model Request {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  listingId   String         @db.ObjectId
  serviceId   String?        @db.ObjectId
  customerId  String         @db.ObjectId
  title       String?
  description String
  address     String?
  pictures    String[]
  budgetMin   Float?
  budgetMax   Float?
  status      String         @default("pending") // pending | declined | accepted
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // relations
  listing     Listing        @relation(fields: [listingId], references: [id], onDelete: Cascade)
  service     Service?       @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  customer    User           @relation(fields: [customerId], references: [id], onDelete: Restrict)
  windows     RequestWindow[]

  @@index([listingId])
  @@index([customerId])
  @@index([serviceId])
}

model RequestWindow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  requestId String   @db.ObjectId
  startAt   DateTime
  endAt     DateTime

  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
}


model Reviews {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  rating     Int      // e.g. 1 to 5
  comment    String?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listingId])
}


model TempListing {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSessionId String?   @unique
  category        String[]
  is_business     Boolean @default(true)
  imageSrc        String?
  title           String
  description     String
  email           String
  operationCounties String[]
  phone_number    String
  company_name    String
  street          String
  town            String
  city            String
  county          String
  country         String
  plan            String
  isActive        Boolean
  userId          String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model job {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle       String //site manager
  category      String //plumber, electical
  companyName    String
  location       String
  salary         String?
  jobType       String //eg fulltime
  requirements   String[]
  description    String
  benefits       String[]
  contactInfo    String //who to contact if interested
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.ObjectId
  listingId      String @db.ObjectId

  listing Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Posts {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  comment String?
  pictures String[]
  listingId String @db.ObjectId
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Quote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  // Customer Info
  customerName     String
  customerEmail    String
  customerPhone    String

  // Company Info
  companyName      String
  companyEmail     String
  companyPhone     String
  companyAddress   String
  companyCity      String
  companyPostalCode String
  companyCounty    String

  // Relations
  tables     Table[]
  notes      Note[]

  status     String
  total      Float
  template Int @default(0)
  accesstoken String?
  accessTokenExpires DateTime?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Table {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  quoteId  String   @db.ObjectId
  quote    Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  columns  String[] 
  multiplierColumns String[]
  items    Item[]
}

model Item {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  data      Json     // NEW: Holds all dynamic fields like quantity, price, etc.
  tableId   String   @db.ObjectId
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Note {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  quoteId     String   @db.ObjectId
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}


